When assisting with this project:
1. Use Next.js with Pages directory (not App router)
2. Use JavaScript (.js files), not TypeScript
3. Use Tailwind CSS + DaisyUI for styling
4. Use MongoDB for database
5. All collections should be prefixed with "agency_"
6. Follow the exact database structure provided below

Here is allready a working Login Follow, do not alter this but try to protect you 
files that you create by using the same structure and thechnik. Do not try to make 
this flow any more complicated.

/pages/api/auth/login.js
/pages/api/auth/logout.js
/utils/mongodb.js

the login function is using a collection called: users 

DO NOT CHANGE THE mongodb.js file its a working file. 




// DIGITAL AGENCY SYSTEM - COMPLETE REFERENCE FILE
// This file contains both database structure and implementation instructions

/*
=========================================
PART 1: DATABASE COLLECTIONS STRUCTURE
=========================================
*/

// First: Create all collections
use digital_agency_db;

db.createCollection("agency_service_packages");
db.createCollection("agency_services");
db.createCollection("agency_contracts");
db.createCollection("agency_projects");
db.createCollection("agency_tasks");
db.createCollection("agency_clients");
db.createCollection("agency_process_templates");
db.createCollection("agency_process_instances");
db.createCollection("agency_employees");
db.createCollection("agency_time_tracking");
db.createCollection("agency_invoices");
db.createCollection("agency_assets");
db.createCollection("agency_reports");
db.createCollection("agency_client_communications");
db.createCollection("agency_leads");

// Collection Structures:

// 1. agency_service_packages
{
  package_id: String,         // e.g., "PKG001"
  name: String,              // Package name
  tier: String,              // "small", "medium", "large"
  package_type: String,      // "retainer" or "project"
  basePrice: Number,         // Base price in currency
  billing_frequency: String, // "monthly", "quarterly", "annual"
  minimum_contract_months: Number,
  includedServices: [
    {
      service_id: String,    // Reference to services
      quantity: Number       // Amount of service included
    }
  ],
  active: Boolean,
  created_at: Date,
  updated_at: Date
}

// 2. agency_services
{
  service_id: String,        // e.g., "SRV001"
  name: String,             // Service name
  category: String,         // "digital-marketing", "development", etc.
  service_type: String,     // "retainer" or "project"
  billing_type: String,     // "monthly", "hourly", "project"
  description: String,
  deliverables: [
    {
      name: String,
      description: String,
      estimatedHours: Number
    }
  ],
  active: Boolean,
  created_at: Date
}

// 3. agency_clients
{
  client_id: String,        // e.g., "CLT001"
  name: String,            // Primary contact name
  company: String,         // Company name
  industry: String,
  contactInfo: {
    email: String,
    phone: String
  },
  status: String,          // "active", "inactive", "prospect"
  active: Boolean,
  created_at: Date
}

// 4. agency_contracts
{
  contract_id: String,      // e.g., "CNT001"
  client_id: String,       // Reference to clients
  package_id: String,      // Reference to service packages
  status: String,          // "active", "pending", "completed"
  start_date: Date,
  end_date: Date,
  monthly_fee: Number,
  billing: {
    frequency: String,     // "monthly", "quarterly", "annual"
    next_billing_date: Date,
    payment_terms: String  // "net-15", "net-30"
  },
  active: Boolean,
  created_at: Date
}

// 5. agency_projects
{
  project_id: String,       // e.g., "PRJ001"
  client_id: String,       // Reference to clients
  service_id: String,      // Reference to services
  name: String,
  project_type: String,    // "website", "branding", etc.
  status: String,          // "planning", "in-progress", "completed"
  start_date: Date,
  end_date: Date,
  total_budget: Number,
  phases: [
    {
      name: String,
      status: String,
      start_date: Date,
      end_date: Date,
      deliverables: [String]
    }
  ],
  active: Boolean,
  created_at: Date
}

// 6. agency_tasks
{
  task_id: String,         // e.g., "TSK001"
  contract_id: String,     // Reference to contracts (optional)
  project_id: String,      // Reference to projects (optional)
  service_id: String,      // Reference to services
  name: String,
  status: String,          // "pending", "in-progress", "completed"
  assigned_to: String,     // Reference to employees
  deadline: Date,
  active: Boolean,
  created_at: Date
}

// 7. agency_employees
{
  employee_id: String,      // e.g., "EMP001"
  name: String,
  role: String,
  email: String,
  hourly_rate: Number,
  skills: [String],
  active: Boolean,
  created_at: Date
}

// 8. agency_time_tracking
{
  time_entry_id: String,    // e.g., "TIME001"
  employee_id: String,      // Reference to employees
  contract_id: String,      // Reference to contracts (optional)
  project_id: String,       // Reference to projects (optional)
  task_id: String,         // Reference to tasks
  date: Date,
  hours: Number,
  description: String,
  billable: Boolean,
  created_at: Date
}

// Required Indexes
db.agency_clients.createIndex([("client_id", 1)], { unique: true });
db.agency_services.createIndex([("service_id", 1)], { unique: true });
db.agency_service_packages.createIndex([("package_id", 1)], { unique: true });
db.agency_contracts.createIndex([("contract_id", 1)], { unique: true });
db.agency_tasks.createIndex([("task_id", 1)], { unique: true });
db.agency_contracts.createIndex([("client_id", 1)]);
db.agency_tasks.createIndex([("contract_id", 1)]);
db.agency_tasks.createIndex([("project_id", 1)]);
db.agency_time_tracking.createIndex([("employee_id", 1)]);
db.agency_time_tracking.createIndex([("task_id", 1)]);

/*
=========================================
PART 2: SYSTEM IMPLEMENTATION DETAILS
=========================================
*/

// PROJECT STRUCTURE
/pages
  /api                    // API routes
    /clients             // Client-related endpoints
    /projects            // Project-related endpoints
    /tasks               // Task-related endpoints
    /time               // Time tracking endpoints
  /dashboard            // Dashboard views
    index.js            // Main dashboard
    admin.js            // Admin dashboard
    client.js           // Client dashboard
  /clients              // Client management
    index.js            // Client list
    [id].js             // Client details
    new.js              // New client form
  /projects             // Project management
    index.js            // Project list
    [id].js             // Project details
    new.js              // New project form
  /tasks                // Task management
    index.js            // Task list
    board.js            // Kanban board
  /time                 // Time tracking
    index.js            // Time entry
    reports.js          // Time reports
  _app.js              // App wrapper
  index.js             // Landing page

// KEY FEATURES BY PAGE

1. Dashboard (/pages/dashboard/index.js)
- Overview statistics
- Recent activities
- Upcoming deadlines
- Quick actions
- Key metrics display

2. Client Management (/pages/clients/*)
- Client listing with filters
- Detailed client profiles
- Service history
- Contract management
- Communication log

3. Project Management (/pages/projects/*)
- Project timeline
- Task management
- Resource allocation
- Progress tracking
- File management

4. Time Tracking (/pages/time/*)
- Time entry
- Project time allocation
- Reporting
- Invoice generation
- Team utilization

// TECH STACK
- Next.js (Pages directory)
- MongoDB/Mongoose
- JavaScript (.js files)
- Tailwind CSS + DaisyUI
- NextAuth.js

// DEVELOPMENT PRIORITIES

Phase 1: Core Setup
1. Database connection
2. Authentication system
3. Basic CRUD operations
4. Client management

Phase 2: Project Management
1. Project creation/management
2. Task tracking
3. Time tracking
4. Basic reporting

Phase 3: Advanced Features
1. Process automation
2. Advanced reporting
3. Integration features
4. Client portal

// IMPLEMENTATION NOTES

1. Authentication:
- Use NextAuth.js
- Role-based access (admin, employee, client)
- Secure API routes
- Session management

2. Data Handling:
- Server-side pagination
- Real-time updates where needed
- Proper error handling
- Data validation

3. UI/UX:
- Mobile responsive
- Loading states
- Error messages
- Success notifications
- Confirmation dialogs

4. Security:
- Input validation
- Data sanitization
- API route protection
- Rate limiting
- Error handling

This reference should be used when:
1. Setting up database collections
2. Creating new features
3. Implementing API routes
4. Building frontend components
5. Planning new functionality